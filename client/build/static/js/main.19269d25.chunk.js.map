{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","onChangeColor","event","setState","color","target","value","console","log","resize","ctx","canva","current","getContext","canvas","width","window","innerWidth","height","innerHeight","getPosition","x","clientX","offsetLeft","y","clientY","offsetTop","startPainting","paint","state","stopPainting","beginPath","lineWidth","lineCap","strokeStyle","moveTo","lineTo","stroke","pdfDownload","input","html2canvas","then","uri","toDataURL","split","data","JSON","stringify","axios","url","method","headers","response","path","responseType","Accept","params","resp","file","Blob","fileURL","URL","createObjectURL","link","document","createElement","href","download","body","append","click","remove","catch","err","React","createRef","this","addEventListener","onChange","type","name","style","backgroundColor","id","border","ref","marginTop","onClick","Component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.19269d25.chunk.js","sourcesContent":["import React, { Component, Fragment } from \"react\";\nimport \"./App.css\";\nimport * as html2canvas from \"html2canvas\";\nimport jspdf from \"jspdf\";\nimport axios from \"axios\";\nimport FileSaver from \"file-saver\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      color: \"black\",\n      paint: false,\n      x: 0,\n      y: 0,\n    };\n\n    this.canva = React.createRef();\n  }\n  onChangeColor = (event) => {\n    this.setState({\n      color: event.target.value,\n    });\n    console.log(event.target.value);\n  };\n  componentDidMount() {\n    this.resize();\n\n    document.addEventListener(\"mousedown\", this.startPainting);\n    document.addEventListener(\"mouseup\", this.stopPainting);\n    document.addEventListener(\"mousemove\", this.paint);\n    window.addEventListener(\"resize\", this.resize);\n  }\n\n  resize = () => {\n    let canvas = this.canva.current;\n    let ctx = canvas.getContext(\"2d\");\n    ctx.canvas.width = window.innerWidth * 0.95;\n    ctx.canvas.height = window.innerHeight * 0.65;\n  };\n\n  getPosition = (event) => {\n    let canva = this.canva.current;\n    this.setState({\n      x: event.clientX - canva.offsetLeft,\n      y: event.clientY - canva.offsetTop,\n    });\n\n  };\n\n  startPainting = (event) => {\n    this.setState({\n      paint: true,\n    });\n    console.log(this.state.paint);\n    this.getPosition(event);\n  };\n\n  stopPainting = () => {\n    this.setState({\n      paint: false,\n    });\n  };\n\n  paint = (event) => {\n    if (!this.state.paint) return;\n    let canva = this.canva.current;\n    let ctx = canva.getContext(\"2d\");\n    //console.log(ctx);\n\n    ctx.beginPath();\n\n    ctx.lineWidth = 5;\n\n    // Sets the end of the lines drawn\n    // to a round shape.\n    ctx.lineCap = \"round\";\n\n    ctx.strokeStyle = this.state.color;\n\n    ctx.moveTo(this.state.x, this.state.y);\n\n    this.getPosition(event);\n\n    ctx.lineTo(this.state.x, this.state.y);\n    ctx.stroke();\n  };\n\n  pdfDownload = () => {\n    const input = this.canva.current;\n    html2canvas(input).then((canvas) => {\n      // const imgData = canvas.toDataUrl('image/jpeg');\n      var base64URL = canvas.toDataURL(\"image/jpeg\");\n      //document.body.appendChild(canvas);\n      //console.log(base64URL);\n\n      const uri = base64URL.split(\";base64,\");\n      var data = JSON.stringify({\n        data: uri[1],\n      });\n\n      axios({\n        url: \"https://canvadraw.herokuapp.com/api/file\",\n        method: \"POST\",\n        data: data,\n        headers: { \"Content-Type\": \"application/json\" },\n      })\n        .then((response) => {\n          const path = response.data.path;\n          axios({\n            url: \"https://canvadraw.herokuapp.com/api/send\",\n            method: \"GET\",\n            responseType: 'blob',\n            headers: {Accept: 'application/pdf'},\n            params: { path: path },\n          }).then((resp) => {\n            console.log(\"hii\", resp.data);\n\n            // window.open(resp.data, '_blank');\n            const file = new Blob([resp.data]);\n            const fileURL = window.URL.createObjectURL(file);\n            // window.open(URL.createObjectURL(resp.data));\n            const link = document.createElement(\"a\");\n            link.href = fileURL;\n            link.download = \"myfile.pdf\";\n            //link.setAttribute(\"download\", \"myfile.pdf\");\n            document.body.append(link);\n            link.click();\n            link.remove();\n          });\n        })\n        .catch((err) => {\n          console.log(\"error1\", err);\n        });\n    });\n  };\n\n  render() {\n    return (\n      <Fragment>\n        <h1>Canvas | Draw anything you want</h1>\n        <hr />\n        <div onChange={this.onChangeColor}>\n          <input\n            type=\"radio\"\n            name=\"color\"\n            value=\"black\"\n            style={{ backgroundColor: \"black\" }}\n          />\n          Black\n          <input\n            type=\"radio\"\n            name=\"color\"\n            value=\"red\"\n            style={{ color: \"red\" }}\n          />\n          Red\n          <input type=\"radio\" name=\"color\" value=\"blue\" />\n          Blue\n          <input type=\"radio\" name=\"color\" value=\"green\" />\n          Green\n          <input type=\"radio\" name=\"color\" value=\"yellow\" />\n          Yellow\n        </div>\n        <br />\n        <canvas\n          id=\"canvas\"\n          style={{ border: \"1px solid\" }}\n          ref={this.canva}\n        ></canvas>\n        <br />\n        <button style={{ marginTop: \"5vh\" }} onClick={this.pdfDownload}>\n          Save PDF\n        </button>\n      </Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}